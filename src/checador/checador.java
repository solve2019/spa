/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package checador;

import AbrirChapa.AbrirManualPuerta;
import AbrirChapa.abrirchapaarduino;
import BD.ConexionBD;
import CatalogoCostos.CatCostos;
import CatalogoProveedores.CatProveedor;
import agenda_citas.agenda;
import agenda_citas.enviarcorreos;
import capturafoto.frmPrincipal;
import com.digitalpersona.onetouch.DPFPDataPurpose;
import com.digitalpersona.onetouch.DPFPFeatureSet;
import com.digitalpersona.onetouch.DPFPGlobal;
import com.digitalpersona.onetouch.DPFPSample;
import com.digitalpersona.onetouch.DPFPTemplate;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.DPFPDataAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPDataEvent;
import com.digitalpersona.onetouch.capture.event.DPFPErrorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPErrorEvent;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusEvent;
import com.digitalpersona.onetouch.capture.event.DPFPSensorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPSensorEvent;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import com.digitalpersona.onetouch.verification.DPFPVerification;
import com.digitalpersona.onetouch.verification.DPFPVerificationResult;
import conex.conexion;
import empleados.cat_empleados;
import horarios.cat_horarios;
import java.awt.Color;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import movimientos.movimientosDAO;
import reportes.Cobros;
import reportes.reporteExcel;
import reportes.reportes;



/**
 *
 * @author JOSE
 */
public class checador extends javax.swing.JFrame {
 private static TableRowSorter<TableModel> sorter;
 String hora,minutos,segundos,ampm;
 int reset=10;
    /**
     * Creates new form checador
     */
    public checador() {
        initComponents();
         txtArea.setEditable(false);
        Image icon = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/checador.png"));
       setIconImage(icon);
     try {
         llenarTablaMov();
         llenarTablaSalida();
     } catch (Exception ex) {
         Logger.getLogger(checador.class.getName()).log(Level.SEVERE, null, ex);
     }
     
     Iniciar();
     start();
     EstadoHuellas();
     
     Timer timer = new Timer(); 
        // Dentro de 0 milisegundos avísame cada 1000 milisegundos 
     timer.scheduleAtFixedRate(timerTask, 0, 1000);
     
     
     Timer timer2 = new Timer(); 
        // Dentro de 0 milisegundos avísame cada 1000 milisegundos 
     timer2.scheduleAtFixedRate(timerTask2, 0, 220000);
     
     
     
     //frmPrincipal tomafoto=new frmPrincipal("0");
     //tomafoto.setVisible(true);
        String ruta_logo=new File ("").getAbsolutePath ()+"/imagenes_configurables/logo_sistema.jpg";
        File fichero = new File(ruta_logo);
        if (fichero.exists()){
            jLabel2.setIcon(new ImageIcon(ruta_logo));
        }
     
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtmovimientos = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        jLabel1 = new javax.swing.JLabel();
        txtclave = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lblHoras = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        lblImagenHuella = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtnombre = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        lbfoto = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtsalidas = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        jlestatus = new javax.swing.JLabel();
        jpuno = new javax.swing.JPanel();
        jpdos = new javax.swing.JPanel();
        jptres = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        lblusuario = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registro de Ingresos a SPA");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jtmovimientos.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jtmovimientos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Nombre", "FechaIngreso"
            }
        ));
        jtmovimientos.setRowHeight(22);
        jScrollPane1.setViewportView(jtmovimientos);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Socio:");

        //txtclave.setEditable(false);
        txtclave.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        txtclave.setToolTipText("Ingrese su clave para registrar su E/S");
        txtclave.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtclaveKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtclaveKeyTyped(evt);
            }
        });

        jLabel2.setVisible(true);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reloj_gym.jpg"))); // NOI18N

        lblHoras.setFont(new java.awt.Font("Tahoma", 1, 50)); // NOI18N
        lblHoras.setText("9:00 am");

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane3.setViewportView(txtArea);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Clave:");

        txtnombre.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        txtnombre.setEnabled(false);

        jPanel2.setBackground(new java.awt.Color(184, 168, 160));

        lbfoto.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbfoto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbfoto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 26)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 0, 0));
        jLabel4.setText("SISTEMA DE SESIONES PARA SPA");

        jtsalidas.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jtsalidas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "Fecha Entrada", "Fecha Salida"
            }
        ));
        jtsalidas.setRowHeight(22);
        jScrollPane2.setViewportView(jtsalidas);

        jlestatus.setBackground(new java.awt.Color(0, 0, 0));
        jlestatus.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N

        jpuno.setBackground(new java.awt.Color(184, 168, 160));
        jpuno.setVisible(false);

        javax.swing.GroupLayout jpunoLayout = new javax.swing.GroupLayout(jpuno);
        jpuno.setLayout(jpunoLayout);
        jpunoLayout.setHorizontalGroup(
            jpunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jpunoLayout.setVerticalGroup(
            jpunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 61, Short.MAX_VALUE)
        );

        jpdos.setBackground(new java.awt.Color(184, 168, 160));
        jpdos.setVisible(false);

        javax.swing.GroupLayout jpdosLayout = new javax.swing.GroupLayout(jpdos);
        jpdos.setLayout(jpdosLayout);
        jpdosLayout.setHorizontalGroup(
            jpdosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jpdosLayout.setVerticalGroup(
            jpdosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 57, Short.MAX_VALUE)
        );

        jptres.setBackground(new java.awt.Color(184, 168, 160));
        jptres.setVisible(false);

        javax.swing.GroupLayout jptresLayout = new javax.swing.GroupLayout(jptres);
        jptres.setLayout(jptresLayout);
        jptresLayout.setHorizontalGroup(
            jptresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jptresLayout.setVerticalGroup(
            jptresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 56, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblImagenHuella, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(124, 124, 124))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jpuno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jpdos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jptres, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtclave)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jlestatus, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(lblHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)))
                .addGap(196, 196, 196))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtclave, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2))
                        .addGap(17, 17, 17)
                        .addComponent(jlestatus, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jpuno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpdos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jptres, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(lblImagenHuella, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jMenu1.setText("Catálogos");
        jMenu1.setVisible(false);
        jMenu1.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N

        jMenuItem1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/empleado.png"))); // NOI18N
        jMenuItem1.setText("Clientes");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuItem6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/calendar_2.png"))); // NOI18N
        jMenuItem6.setText("Tipo de Cobros");
        jMenuItem6.setVisible(false);
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuItem10.setText("Agenda");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem10);

        jMenuItem8.setVisible(false);
        jMenuItem8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuItem8.setText("Proveedores");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Reportes");
        jMenu2.setVisible(false);
        jMenu2.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N

        jMenuItem2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/email.gif"))); // NOI18N
        jMenuItem2.setVisible(false);
        jMenuItem2.setText("Asistencias General");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuItem7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Arrow-Down.png"))); // NOI18N
        jMenuItem7.setText("Cobros");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Excel.gif"))); // NOI18N
        jMenuItem4.setText("Movimientos de Entrada");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Ingresar");
        jMenu4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jMenuItem3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_Search.gif"))); // NOI18N
        jMenuItem3.setVisible(false);
        jMenuItem3.setText("Acerca de..");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem3);

        jMenuItem5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/application_key.png"))); // NOI18N
        jMenuItem5.setText("Cambiar Usuario");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem5);

        jMenuItem9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuItem9.setVisible(false);
        jMenuItem9.setText("Abrir Puerta Manual");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem9);

        jMenuBar1.add(jMenu4);

        lblusuario.setText("Usuario:");
        lblusuario.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuBar1.add(lblusuario);

        jMenu3.setText("Cerrar Sesion");
        jMenu3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });
        jMenu3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenu3KeyPressed(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1291, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        
        
        JPasswordField pwd = new JPasswordField(10); 
            pwd.requestFocus();
            String respuesta="";
            int action = 0;
            //int action = JOptionPane.showConfirmDialog(null, pwd,"Ingrese contraseña",JOptionPane.OK_CANCEL_OPTION);
            pwd.requestFocus();
            if(action < 0){
                //JOptionPane.showMessageDialog(null,"Cancel, X or escape key selected");
            }
            else{
                respuesta=new String(pwd.getPassword());
                //JOptionPane.showMessageDialog(null,"Your password is "+new String(pwd.getPassword()));
            }
            respuesta="Admon2016";
            //String respuesta = JOptionPane.showInputDialog("Escribe la clave de administrador para registrar el empleado");
            if(respuesta==null){
                respuesta="";
            }

            if(respuesta.equals("Admon2016")){
                cat_empleados empleados=new cat_empleados(this, false);
                empleados.setVisible(true);
            }
        
        
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        
        
        JPasswordField pwd = new JPasswordField(10); 
            String respuesta="";
            int action = JOptionPane.showConfirmDialog(null, pwd,"Ingrese contraseña",JOptionPane.OK_CANCEL_OPTION);
            if(action < 0){
                //JOptionPane.showMessageDialog(null,"Cancel, X or escape key selected");
            }
            else{
                respuesta=new String(pwd.getPassword());
                //JOptionPane.showMessageDialog(null,"Your password is "+new String(pwd.getPassword()));
            }
            //String respuesta = JOptionPane.showInputDialog("Escribe la clave de administrador para registrar el empleado");
            if(respuesta==null){
                respuesta="";
            }

            if(respuesta.equals("Admon2016")){
                reportes reporte=new reportes(this, false);
                reporte.setVisible(true);
            }
       
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        System.out.println("Acerca de..");
        Activador acerca=new Activador();
        acerca.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void txtclaveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtclaveKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            System.out.println("enter");
            if(txtclave.getText().length()>=1){
                registra();
            }
        }
    }//GEN-LAST:event_txtclaveKeyPressed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        JPasswordField pwd = new JPasswordField(10); 
            String respuesta="";
            int action=0;
            //int action = JOptionPane.showConfirmDialog(null, pwd,"Ingrese contraseña",JOptionPane.OK_CANCEL_OPTION);
            if(action < 0){
                //JOptionPane.showMessageDialog(null,"Cancel, X or escape key selected");
            }
            else{
                respuesta=new String(pwd.getPassword());
                //JOptionPane.showMessageDialog(null,"Your password is "+new String(pwd.getPassword()));
            }
            respuesta="Admon2016";
            //String respuesta = JOptionPane.showInputDialog("Escribe la clave de administrador para registrar el empleado");
            if(respuesta==null){
                respuesta="";
            }

            if(respuesta.equals("Admon2016")){
                reporteExcel reporte=new reporteExcel(this, false);
                reporte.setVisible(true);
            }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void txtclaveKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtclaveKeyTyped
        // TODO add your handling code here:
        char caracter = evt.getKeyChar();
     
       if(txtclave.getText().length()>8){
             evt.consume();  // ignorar el evento de teclado
       }else{        
        // Verificar si la tecla pulsada no es un digito
        if(((caracter < '0') ||
           (caracter > '9')) &&
           (caracter != '\b' /*corresponde a BACK_SPACE*/))
        {
           evt.consume();  // ignorar el evento de teclado
        }
      }
    }//GEN-LAST:event_txtclaveKeyTyped

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
            login logins=new login(this, false);
            logins.setVisible(true);
            /*JPasswordField pwd = new JPasswordField(10); 
            pwd.requestFocus();
            String respuesta="";
            int action = JOptionPane.showConfirmDialog(null, pwd,"Ingrese contraseña",JOptionPane.OK_CANCEL_OPTION);
            pwd.requestFocus();
            if(action < 0){
                //JOptionPane.showMessageDialog(null,"Cancel, X or escape key selected");
            }
            else{
                respuesta=new String(pwd.getPassword());
                //JOptionPane.showMessageDialog(null,"Your password is "+new String(pwd.getPassword()));
            }
            //String respuesta = JOptionPane.showInputDialog("Escribe la clave de administrador para registrar el empleado");
            if(respuesta==null){
                respuesta="";
            }

            if(respuesta.equals("Admon2016")){
                accesoSistema acceso=new accesoSistema();
                boolean ingresasistema=acceso.validaAcceso("", "");
                jMenu1.setVisible(true);
                jMenu2.setVisible(true);
                
            }*/
        
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        CatCostos costos=new CatCostos();
        costos.setVisible(true);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        Cobros cobro=new Cobros(this, false);
        cobro.setVisible(true);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        CatProveedor empleados=new CatProveedor(this, false);
                empleados.setVisible(true);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        AbrirManualPuerta abrepuerta=new AbrirManualPuerta(this, false);
            abrepuerta.setVisible(true);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        // TODO add your handling code here:
                    checador.jMenu2.setVisible(false);     
                    checador.jMenuItem6.setVisible(false);     
                    checador.jMenu1.setVisible(false);
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void jMenu3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenu3KeyPressed
        // TODO add your handling code here:
          checador.jMenu2.setVisible(false);     
                    checador.jMenuItem6.setVisible(false);     
                    checador.jMenu1.setVisible(false);
    }//GEN-LAST:event_jMenu3KeyPressed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:
                    lblusuario.setText("Usuario:");
                    checador.jMenu2.setVisible(false);     
                    checador.jMenuItem6.setVisible(false);     
                    checador.jMenu1.setVisible(false);
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        
        agenda citas=new agenda();
        citas.setVisible(true);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(checador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(checador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(checador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(checador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
              checador checad =  new checador();
              checad.setExtendedState(MAXIMIZED_BOTH);
                checad.setVisible(true);
                 
            }
        });
    }
    
    
     public static void llenarTablaMov() throws Exception{
       jtmovimientos.removeAll(); 
       movimientosDAO control=new movimientosDAO();
       ResultSet res= control.obtenerMovimiento();
           String[] datosTabla={"Id", "Nombre", "Ultimo Comentario"};
           DefaultTableModel datos = new DefaultTableModel(null, datosTabla);
           while(res.next()){ 
               String coment="";
                ResultSet res2= control.obtenerUltimoComent(res.getString("id_emp"));   
                while(res2.next()){
                    coment=res2.getString("comentario");
                }
                res2.close();
                datos.addRow(new Object[]{res.getString("id_mov"),res.getString("nombre"),coment});
           }
            jtmovimientos.setModel(datos);
           
           jtmovimientos.getTableHeader().setReorderingAllowed(false);          
          sorter = new TableRowSorter<TableModel>(datos);
          jtmovimientos.setRowSorter(sorter);
          jtmovimientos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
          jtmovimientos.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
          jtmovimientos.setRowHeight(20);
         // tablaEmpleados.getColumnModel().getColumn(0).setPreferredWidth(10);
          jtmovimientos.getColumnModel().getColumn(0).setMaxWidth(30);
           
    }
     
     
     public static void llenarTablaSalida() throws Exception{
       jtsalidas.removeAll(); 
       movimientosDAO control=new movimientosDAO();
       ResultSet res= control.obtenerSalidas();
           String[] datosTabla={"Nombre", "Fecha Entrada","Fecha Salida"};
           DefaultTableModel datos = new DefaultTableModel(null, datosTabla);
           while(res.next()){               
                datos.addRow(new Object[]{res.getString("nombre"),res.getString("fecha_entrada"),res.getString("fecha_salida")});
           }
            jtsalidas.setModel(datos);
           
           jtsalidas.getTableHeader().setReorderingAllowed(false);          
          sorter = new TableRowSorter<TableModel>(datos);
          jtsalidas.setRowSorter(sorter);
          jtsalidas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
          jtsalidas.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
          jtsalidas.setRowHeight(20);
         // tablaEmpleados.getColumnModel().getColumn(0).setPreferredWidth(10);
          //jtsalidas.getColumnModel().getColumn(0).setMaxWidth(30);
           
    }
     TimerTask timerTask2 = new TimerTask() 
	   { 
	       public void run()  
	       { 
	           // Aquí el código que queremos ejecutar. 
	       	System.out.println("enviar correo para notificacion");
                   enviarcorreos correo=new enviarcorreos();
                   correo.correo();
	       } 
       };
     
      TimerTask timerTask = new TimerTask() 
	   { 
	       public void run()  
	       { 
	           // Aquí el código que queremos ejecutar. 
	       	//System.out.println("celu:");
                   reset--;
                   if(reset<0){
                       txtnombre.setText("");
                       lbfoto.setIcon(null);
                       jlestatus.setText("");                       
                       jpuno.setBackground(new java.awt.Color(227, 253, 227));
                       jpdos.setBackground(new java.awt.Color(253, 197, 197));
                       jptres.setBackground(new java.awt.Color(255, 255, 182));
                       if(reset<500){
                           reset=0;
                       }
                   }
	    	   calcula();
	    	   //lblHora.setText(hora + ":" + minutos + ":" + segundos + " "+ampm+"                     ");	
	    	   lblHoras.setText(hora + ":" + minutos + ":" + segundos + " "+ampm);	
	       } 
       };
      
      
	public void calcula () {
		Calendar calendario = new GregorianCalendar();
		Date fechaHoraActual = new Date();
		
		int y=calendario.get(Calendar.YEAR);
		int m=calendario.get(Calendar.MONTH);
		int d=calendario.get(Calendar.DATE);
		//System.out.println(y+"-"+m+"-"+d);
		
		
		calendario.setTime(fechaHoraActual);
		ampm = calendario.get(Calendar.AM_PM)==Calendar.AM?"AM":"PM";
		if(ampm.equals("PM")){
		int h = calendario.get(Calendar.HOUR_OF_DAY)-12;
		hora = h>9?""+h:"0"+h;
		}else{
		hora = calendario.get(Calendar.HOUR_OF_DAY)>9?""+calendario.get(Calendar.HOUR_OF_DAY):"0"+calendario.get(Calendar.HOUR_OF_DAY); }
		minutos = calendario.get(Calendar.MINUTE)>9?""+calendario.get(Calendar.MINUTE):"0"+calendario.get(Calendar.MINUTE);
		segundos = calendario.get(Calendar.SECOND)>9?""+calendario.get(Calendar.SECOND):"0"+calendario.get(Calendar.SECOND);
		}
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        //CHECADOR
        
        private void btnVerificarActionPerformed(java.awt.event.ActionEvent evt) {                                             
    String nombre = JOptionPane.showInputDialog("Nombre a verificar:");
    verificarHuella(nombre);
    Reclutador.clear();
}                                            

    private void btnIdentificarActionPerformed(java.awt.event.ActionEvent evt) {                                               
    try {
    identificarHuella();
    Reclutador.clear();
    } catch (IOException ex) {
    Logger.getLogger(checador.class.getName()).log(Level.SEVERE, null, ex);
    }
}                                              

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {                                           
    guardarHuella();
    Reclutador.clear();
    lblImagenHuella.setIcon(null);
    start();
}                                          

    private void formWindowOpened(java.awt.event.WindowEvent evt) {                                  
        Iniciar();
	start();
        EstadoHuellas();
        System.out.println("INICIO APLICACION");
        
    }                                 

    private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
        stop();
    }                                  

//Varible que permite iniciar el dispositivo de lector de huella conectado
// con sus distintos metodos.
public static DPFPCapture Lector = DPFPGlobal.getCaptureFactory().createCapture();

//Varible que permite establecer las capturas de la huellas, para determina sus caracteristicas
// y poder estimar la creacion de un template de la huella para luego poder guardarla
private DPFPEnrollment Reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();

//Esta variable tambien captura una huella del lector y crea sus caracteristcas para auntetificarla
// o verificarla con alguna guardada en la BD
private DPFPVerification Verificador = DPFPGlobal.getVerificationFactory().createVerification();

//Variable que para crear el template de la huella luego de que se hallan creado las caracteriticas
// necesarias de la huella si no ha ocurrido ningun problema
private DPFPTemplate template;
public static String TEMPLATE_PROPERTY = "template";

protected void Iniciar(){
   Lector.addDataListener(new DPFPDataAdapter() {
    @Override public void dataAcquired(final DPFPDataEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    EnviarTexto("La Huella Digital ha sido Capturada");
    ProcesarCaptura(e.getSample());
            try {            
                    identificarHuella();
                } catch (Exception ex) {
                    Logger.getLogger(checador.class.getName()).log(Level.SEVERE, null, ex);
                }
            Reclutador.clear();
    }});}
   });

   Lector.addReaderStatusListener(new DPFPReaderStatusAdapter() {
    @Override public void readerConnected(final DPFPReaderStatusEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    EnviarTexto("El Sensor de Huella Digital esta Activado o Conectado");
    }});}
    @Override public void readerDisconnected(final DPFPReaderStatusEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    EnviarTexto("El Sensor de Huella Digital esta Desactivado o no Conectado");
    }});}
   });

   Lector.addSensorListener(new DPFPSensorAdapter() {
    @Override public void fingerTouched(final DPFPSensorEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    EnviarTexto("El dedo ha sido colocado sobre el Lector de Huella");
    }});}
    @Override public void fingerGone(final DPFPSensorEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    EnviarTexto("El dedo ha sido quitado del Lector de Huella");
    }});}
   });

   Lector.addErrorListener(new DPFPErrorAdapter(){
    public void errorReader(final DPFPErrorEvent e){
    SwingUtilities.invokeLater(new Runnable() {  public void run() {
    EnviarTexto("Error: "+e.getError());
    }});}
   });
}

 public DPFPFeatureSet featuresinscripcion;
 public DPFPFeatureSet featuresverificacion;

 public  void ProcesarCaptura(DPFPSample sample)
 {
 // Procesar la muestra de la huella y crear un conjunto de características con el propósito de inscripción.
 featuresinscripcion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);

 // Procesar la muestra de la huella y crear un conjunto de características con el propósito de verificacion.
 featuresverificacion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);

 // Comprobar la calidad de la muestra de la huella y lo añade a su reclutador si es bueno
 if (featuresinscripcion != null)
     try{
     System.out.println("Las Caracteristicas de la Huella han sido creada");
     Reclutador.addFeatures(featuresinscripcion);// Agregar las caracteristicas de la huella a la plantilla a crear

     // Dibuja la huella dactilar capturada.
     Image image=CrearImagenHuella(sample);
     DibujarHuella(image);
     
     //btnVerificar.setEnabled(true);
     //btnIdentificar.setEnabled(true);

     }catch (DPFPImageQualityException ex) {
     System.err.println("Error: "+ex.getMessage());
     }

     finally {
     EstadoHuellas();
     // Comprueba si la plantilla se ha creado.
	switch(Reclutador.getTemplateStatus())
        {
            case TEMPLATE_STATUS_READY:	// informe de éxito y detiene  la captura de huellas
	    stop();
            setTemplate(Reclutador.getTemplate());
	    EnviarTexto("La Plantilla de la Huella ha Sido Creada, ya puede Verificarla o Identificarla");
	    //btnIdentificar.setEnabled(false);
            //btnVerificar.setEnabled(false);
            //btnGuardar.setEnabled(true);
            //btnGuardar.grabFocus();
            break;

	    case TEMPLATE_STATUS_FAILED: // informe de fallas y reiniciar la captura de huellas
	    Reclutador.clear();
            stop();
	    EstadoHuellas();
	    setTemplate(null);
            
            mensaje_registro mensaje=new mensaje_registro("Inscripcion de Huellas Dactilares","La Plantilla de la Huella no pudo ser creada, Repita el Proceso");
            mensaje.setVisible(true);
            
	    //JOptionPane.showMessageDialog(checador.this, "La Plantilla de la Huella no pudo ser creada, Repita el Proceso", "Inscripcion de Huellas Dactilares", JOptionPane.ERROR_MESSAGE);
	    start();
	    break;
	}
	     }
}

 public  DPFPFeatureSet extraerCaracteristicas(DPFPSample sample, DPFPDataPurpose purpose){
     DPFPFeatureExtraction extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
     try {
      return extractor.createFeatureSet(sample, purpose);
     } catch (DPFPImageQualityException e) {
      return null;
     }
}

  public  Image CrearImagenHuella(DPFPSample sample) {
	return DPFPGlobal.getSampleConversionFactory().createImage(sample);
}

  public void DibujarHuella(Image image) {
        lblImagenHuella.setIcon(new ImageIcon(
        image.getScaledInstance(lblImagenHuella.getWidth(), lblImagenHuella.getHeight(), Image.SCALE_DEFAULT)));
        repaint();
 }

public  void EstadoHuellas(){
	//EnviarTexto("Muestra de Huellas Necesarias para Guardar la entrada "+ Reclutador.getFeaturesNeeded());
}

public static void EnviarTexto(String string) {
        txtArea.append(string + "\n");
}

public static void start(){
	Lector.startCapture();
	//EnviarTexto("Utilizando el Lector de Huella Dactilar ");
}

public static void stop(){
        Lector.stopCapture();
        EnviarTexto("No se está usando el Lector de Huella Dactilar ");
}

    public DPFPTemplate getTemplate() {
        return template;
    }

    public void setTemplate(DPFPTemplate template) {
        DPFPTemplate old = this.template;
	this.template = template;
	firePropertyChange(TEMPLATE_PROPERTY, old, template);
    }

ConexionBD con=new ConexionBD();
 /*
  * Guarda los datos de la huella digital actual en la base de datos
  */
    public void guardarHuella(){
     //Obtiene los datos del template de la huella actual
     ByteArrayInputStream datosHuella = new ByteArrayInputStream(template.serialize());
     Integer tamañoHuella=template.serialize().length;

     //Pregunta el nombre de la persona a la cual corresponde dicha huella
     //String nombre = JOptionPane.showInputDialog("Nombre:");
     try {
     //Establece los valores para la sentencia SQL
     Connection c=con.conectar(); //establece la conexion con la BD
     PreparedStatement guardarStmt = c.prepareStatement("UPDATE tc_empleados SET huella=? WHERE id_empleado='0'");
     System.out.println("UPDATE tc_empleados SET huella=? WHERE id_empleado='0'"); 
    //PreparedStatement guardarStmt = c.prepareStatement("INSERT INTO somhue(huenombre, huehuella) values(?,?)");
     //guardarStmt.setString(1,nombre);
     guardarStmt.setBinaryStream(1, datosHuella,tamañoHuella);
     //Ejecuta la sentencia
     guardarStmt.execute();
     guardarStmt.close();
     
     mensaje_registro mensaje=new mensaje_registro("Actualización de huella","Huella Guardada Correctamente");
     mensaje.setVisible(true);
     //JOptionPane.showMessageDialog(null,"Huella Guardada Correctamente");
     con.desconectar();
     //btnGuardar.setEnabled(false);
     //btnVerificar.grabFocus();
     } catch (SQLException ex) {
     //Si ocurre un error lo indica en la consola
     System.err.println("Error al guardar los datos de la huella.");
     }finally{
     con.desconectar();
     }
   }

/**
* Verifica la huella digital actual contra otra en la base de datos
*/
 public void verificarHuella(String nom) {
    try {
    //Establece los valores para la sentencia SQL
    Connection c=con.conectar();
    //Obtiene la plantilla correspondiente a la persona indicada
    PreparedStatement verificarStmt = c.prepareStatement("SELECT huehuella FROM somhue WHERE huenombre=?");
    verificarStmt.setString(1,nom);
    ResultSet rs = verificarStmt.executeQuery();

    //Si se encuentra el nombre en la base de datos
    if (rs.next()){
    //Lee la plantilla de la base de datos
    byte templateBuffer[] = rs.getBytes("huehuella");
    //Crea una nueva plantilla a partir de la guardada en la base de datos
    DPFPTemplate referenceTemplate = DPFPGlobal.getTemplateFactory().createTemplate(templateBuffer);
    //Envia la plantilla creada al objeto contendor de Template del componente de huella digital
    setTemplate(referenceTemplate);

    // Compara las caracteriticas de la huella recientemente capturda con la
    // plantilla guardada al usuario especifico en la base de datos
    DPFPVerificationResult result = Verificador.verify(featuresverificacion, getTemplate());

    //compara las plantilas (actual vs bd)
        if (result.isVerified()){
        mensaje_registro mensaje=new mensaje_registro("OK","Las huella capturada coinciden con la de "+nom);
        mensaje.setVisible(true);    
        //JOptionPane.showMessageDialog(null, "Las huella capturada coinciden con la de "+nom,"Verificacion de Huella", JOptionPane.INFORMATION_MESSAGE);
        }else{
        mensaje_registro mensaje=new mensaje_registro("OK","No corresponde la huella con "+nom);
        mensaje.setVisible(true); 
        //JOptionPane.showMessageDialog(null, "No corresponde la huella con "+nom, "Verificacion de Huella", JOptionPane.ERROR_MESSAGE);
        }
    //Si no encuentra alguna huella correspondiente al nombre lo indica con un mensaje
    } else {
    mensaje_registro mensaje=new mensaje_registro("OK","No existe un registro de huella para "+nom);
    mensaje.setVisible(true); 
    //JOptionPane.showMessageDialog(null, "No existe un registro de huella para "+nom, "Verificacion de Huella", JOptionPane.ERROR_MESSAGE);
    }
    } catch (SQLException e) {
    //Si ocurre un error lo indica en la consola
    System.err.println("Error al verificar los datos de la huella.");
    }finally{
       con.desconectar();
    }
   }

 /**
  * Identifica a una persona registrada por medio de su huella digital
  */
  public void identificarHuella() throws IOException{
     try {
       //Establece los valores para la sentencia SQL
       Connection c=con.conectar();

       //Obtiene todas las huellas de la bd
       PreparedStatement identificarStmt = c.prepareStatement("SELECT concat(nombre,' ',apaterno,' ',amaterno) as nombre,huella,id_empleado,Imagen FROM tc_empleados WHERE huella IS NOT null");
         System.out.println("SELECT concat(nombre,' ',apaterno,' ',amaterno) as nombre,huella,Imagen,id_empleado FROM tc_empleados WHERE huella IS NOT null");
       ResultSet rs = identificarStmt.executeQuery();

       //Si se encuentra el nombre en la base de datos
       while(rs.next()){
       //Lee la plantilla de la base de datos
       
       byte templateBuffer[] = rs.getBytes("huella");
       
       
       
       //Crea una nueva plantilla a partir de la guardada en la base de datos
       DPFPTemplate referenceTemplate = DPFPGlobal.getTemplateFactory().createTemplate(templateBuffer);
       //Envia la plantilla creada al objeto contendor de Template del componente de huella digital
       setTemplate(referenceTemplate);

       // Compara las caracteriticas de la huella recientemente capturda con la
       // alguna plantilla guardada en la base de datos que coincide con ese tipo
       DPFPVerificationResult result = Verificador.verify(featuresverificacion, getTemplate());

       //compara las plantilas (actual vs bd)
       //Si encuentra correspondencia dibuja el mapa
       //e indica el nombre de la persona que coincidió.
            if (result.isVerified()){
            //crea la imagen de los datos guardado de las huellas guardadas en la base de datos
            //JOptionPane.showMessageDialog(null, "Se registro correctamente ","Verificacion de Huella", JOptionPane.INFORMATION_MESSAGE);
                
                
                txtnombre.setText(rs.getString("nombre"));
                txtclave.setText(rs.getString("id_empleado"));


                if(rs.getBlob("Imagen")==null){
                     System.out.println("nullo");
                      lbfoto.setIcon(null);
                 }else{
                     Blob blob = rs.getBlob("Imagen");			
                     byte[] data = blob.getBytes(1, (int)blob.length());
                     //System.out.println("data:"+data);
                     BufferedImage img = null;
                     try {
                             img = ImageIO.read(new ByteArrayInputStream(data));
                     } catch (IOException ex) {

                     }
                     ImageIcon imageIcon = new ImageIcon(img);
                     //lbfoto.setIcon(imageIcon);
                     lbfoto.setIcon(new ImageIcon(imageIcon.getImage().getScaledInstance(268,240,Image.SCALE_SMOOTH)));
                 }
                
                      
                registra();
                return;
            }
       }
       
       //Si no encuentra alguna huella correspondiente al nombre lo indica con un mensaje
       stop();
       mensaje_registro mensaje=new mensaje_registro("ERROR","No existe ningún registro que coincida con la huella");
       mensaje.setVisible(true); 
       //JOptionPane.showMessageDialog(null, "No existe ningún registro que coincida con la huella", "Verificacion de Huella", JOptionPane.ERROR_MESSAGE);
       setTemplate(null);
       lbfoto.setIcon(null);
       txtnombre.setText("");
       txtclave.setText("");
       } catch (SQLException e) {
       //Si ocurre un error lo indica en la consola
       System.err.println("Error al identificar huella dactilarr. "+e.getMessage());
       }finally{
         
       con.desconectar();
       }
   }
        

        //FIN CHECADOR
        
        
  
  
  
  public void registra(){
  reset=40;
  String clave=txtclave.getText().trim();
        txtclave.setText("");
         conexion con = new conexion();
         Statement st = null;
         ResultSet  resultado= null;
        try {
            st = con.getConnection().createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(checador.class.getName()).log(Level.SEVERE, null, ex);
        }
        String hora_ini="", hora_fin="";
        int tolerancia=0, retardomenor=0,retardomayor=0, validaretardomayor=0;
        int fechadif=0;
        String sentencia="SELECT id_empleado,apaterno,amaterno,nombre,id_horario,hora_ini,hora_fin,tiempo_tolerancia,retardo_menor,retardo_mayor,datediff(fecha_vencimiento,now()) as fecha,fecha_vencimiento,Imagen from tc_empleados where id_empleado='"+clave+"' and estatus=1";
        System.out.println(sentencia);
        try {    
        resultado = st.executeQuery(sentencia);
        String nombre="", id_empleado="", id_horario="0";
        boolean valida=false;
        boolean validaacceso=true;  
        while (resultado.next())
        {                              
          id_empleado=resultado.getString("id_empleado");
          nombre=resultado.getString("apaterno")+" "+resultado.getString("amaterno")+" "+resultado.getString("nombre");
          id_horario=resultado.getString("id_horario");
          hora_ini=resultado.getString("hora_ini");   
          hora_fin=resultado.getString("hora_fin");  
          tolerancia=resultado.getInt("tiempo_tolerancia");  
          retardomenor=resultado.getInt("retardo_menor"); 
          retardomayor=resultado.getInt("retardo_mayor");  
          fechadif=resultado.getInt("fecha"); 
          valida=true; //valida si existe el empleado
          txtnombre.setText(nombre);
                if(resultado.getBlob("Imagen")==null){
                     System.out.println("nullo");
                      lbfoto.setIcon(null);
                 }else{
                     Blob blob = resultado.getBlob("Imagen");			
                     byte[] data = blob.getBytes(1, (int)blob.length());
                     //System.out.println("data:"+data);
                     BufferedImage img = null;
                     try {
                             img = ImageIO.read(new ByteArrayInputStream(data));
                     } catch (IOException ex) {

                     }
                     ImageIcon imageIcon = new ImageIcon(img);
                     //lbfoto.setIcon(imageIcon);
                     lbfoto.setIcon(new ImageIcon(imageIcon.getImage().getScaledInstance(268,240,Image.SCALE_SMOOTH)));
                 }
              
          //abrirchapaarduino abrirpuerta=new abrirchapaarduino();      
          System.out.println("fechadif: "+fechadif);      
           jlestatus.setText("BIENVENIDO");
           jlestatus.setForeground(Color.GREEN);
           jpuno.setBackground(Color.GREEN);
           jptres.setBackground(new java.awt.Color(255, 255, 182));
           jpdos.setBackground(new java.awt.Color(253, 197, 197));
              
          if(fechadif<0){
              //jlestatus.setText("VENCIDO "+resultado.getString("fecha_vencimiento"));
              /*jlestatus.setText("ALTO");
              jlestatus.setForeground(Color.red);  
              validaacceso=false;
              jpdos.setBackground(Color.red);
              jptres.setBackground(new java.awt.Color(255, 255, 182));
              jpuno.setBackground(new java.awt.Color(227, 253, 227));*/
          }else if(fechadif>=0 && fechadif<=3){
              //jlestatus.setText("RENOVAR "+resultado.getString("fecha_vencimiento"));
              /*jlestatus.setText("RENOVAR");
              jlestatus.setForeground(Color.ORANGE);
              jptres.setBackground(Color.ORANGE);
              jpdos.setBackground(new java.awt.Color(253, 197, 197));
              jpuno.setBackground(new java.awt.Color(227, 253, 227));
              */
              /*try {
                  Thread.sleep(100);
              } catch (InterruptedException ex) {
                  Logger.getLogger(checador.class.getName()).log(Level.SEVERE, null, ex);
              }*/
              //abrirpuerta.abrirchapa();
          }else{
              //jlestatus.setText("ACTIVO "+resultado.getString("fecha_vencimiento"));
              jlestatus.setText("BIENVENIDO");
              jlestatus.setForeground(Color.GREEN);
              jpuno.setBackground(Color.GREEN);
              jptres.setBackground(new java.awt.Color(255, 255, 182));
              jpdos.setBackground(new java.awt.Color(253, 197, 197));
              /*try {
                  Thread.sleep(100);
              } catch (InterruptedException ex) {
                  Logger.getLogger(checador.class.getName()).log(Level.SEVERE, null, ex);
              }*/
              ///abrirpuerta.abrirchapa();
          }
        }
        
        if(!id_empleado.equals("")){
            SesionesSpa sesiones=new SesionesSpa(this, false,id_empleado,nombre);
            sesiones.setVisible(true);
        }
        
        System.out.println("FIN DE APERTURA DE CHAPA");
        //System.out.println("fechadif: "+fechadif);
        
        
        //sentencia="select * from tc_horarios where id_horario="+id_horario;
        //System.out.println(""+sentencia);
        
        boolean validahorario=true;
        //resultado = st.executeQuery(sentencia);
        //while (resultado.next())
        //{                              
          //hora_ini=resultado.getString("hora_ini");   
          //hora_fin=resultado.getString("hora_fin");  
          //tolerancia=resultado.getInt("tiempo_tolerancia");  
          //validahorario=true;
        //}
        validaacceso=false;
        if(validaacceso==true){//tiene esstatrus en ALTO Y NO REALIZA NADA
        
        
                java.util.Date utilDate = new java.util.Date(); //fecha actual
                long lnMilisegundos = utilDate.getTime();
                java.sql.Date sqlDate = new java.sql.Date(lnMilisegundos); //fecha actual

                hora_ini=sqlDate+" "+hora_ini;//fecha entrada
                hora_fin=sqlDate+" "+hora_fin;//fecha salida

                //System.out.println("hora_ini:"+hora_ini+" hora_fin:"+hora_fin);

                //valida si tiene registros del dia

                sentencia="select TIMESTAMPDIFF(MINUTE,fecha_entrada,now()) as tiempoentro,id_mov from to_movimientos where clave='"+clave+"' and fecha_movimiento='"+sqlDate+"'";
                //System.out.println(""+sentencia);
                resultado = st.executeQuery(sentencia);
                boolean registrodeldia=false;
                if (resultado.next())
                {                              
                  registrodeldia=true;
                }

                //fin valida registros del dia


                sentencia="select TIMESTAMPDIFF(MINUTE,fecha_entrada,now()) as tiempoentro,id_mov from to_movimientos where clave='"+clave+"' and fecha_movimiento='"+sqlDate+"' and fecha_salida is null";
                //System.out.println(""+sentencia);
                String id_mov="";
                int tiempo_entro=0;
                boolean validamov=false;
                resultado = st.executeQuery(sentencia);
                while (resultado.next())
                {                              
                  id_mov=resultado.getString("id_mov"); 
                  tiempo_entro=resultado.getInt("tiempoentro"); 
                    System.out.println("id_mov"+id_mov);
                    validamov=true;
                }




                if(validahorario==true){//valida si tiene horario establecido de lo contrario no lo deja registrar
                    if(valida==true){//existe el empleado
                            if(validamov==true && tiempo_entro>=0){//modifica la fecha porque es salida  y valida que haya pasado un minuto para su registro

                                sentencia="select TIMESTAMPDIFF(hour,'"+hora_fin+"',now()) as tiempoextra";//obtiene las horas extras
                                //System.out.println(""+sentencia);
                                int horaextra=0;
                                /*resultado = st.executeQuery(sentencia);
                                while (resultado.next())
                                {                              
                                  horaextra=resultado.getInt("tiempoextra");   
                                }
                                if(horaextra>0){
                                }else{
                                    horaextra=0;
                                }*/

                                sentencia="select TIMESTAMPDIFF(MINUTE,'"+hora_fin+"',now()) as salidatemprano";//permite saber si salio termprano
                                //System.out.println(""+sentencia);
                                int salidatemprano=0;
                                /*resultado = st.executeQuery(sentencia);
                                while (resultado.next())
                                {                              
                                  salidatemprano=resultado.getInt("salidatemprano");   
                                }
                                if(salidatemprano<0){
                                    salidatemprano=1;//salio temprano
                                }else{
                                    salidatemprano=0;
                                }*/

                                st.executeUpdate("update to_movimientos set saliotemprano='"+salidatemprano+"', hora_extra='"+horaextra+"', fecha_salida=now(), hora_salida='"+hora_fin+"' where id_mov='"+id_mov+"'");
                                stop();
                                mensaje_registro mensaje=new mensaje_registro("OK","Salida registrada correctamente ");
                                mensaje.setVisible(true);
                                //JOptionPane.showMessageDialog(null,"Salida registrada correctamente ");
                                //start();
                            }
                            if(validamov==false){//es un nuevo ingreso

                                sentencia="select TIMESTAMPDIFF(MINUTE,'"+hora_ini+"', now()) as retardo";
                                //System.out.println(""+sentencia);
                                int mindif=0;
                                /*resultado = st.executeQuery(sentencia);
                                while (resultado.next())
                                {                              
                                  mindif=resultado.getInt("retardo");   
                                }*/
                                int tiporetardo=0;  //0 sin retardo   1 retardo menor  2 retarno mayor
                                /*if(mindif>=0){
                                    if(mindif<=tolerancia){//tolerancia del empleado
                                        tiporetardo=0; 
                                    }else if(mindif>tolerancia && mindif<=retardomenor){    //retardo menor
                                       tiporetardo=1; 
                                    }else{//retardo mayor
                                        tiporetardo=2;
                                        validaretardomayor=2;
                                    }
                                }else{
                                    mindif=0;               
                                }*/
                                java.util.Date fechadia = new java.util.Date(); //fecha actual 
                                int diasemanal=0;
                                int diasemana=getDayOfTheWeek(fechadia);//permite saber si es dia de lunes a viernes
                                if(diasemana==1 || diasemana==7){
                                    diasemanal=1;
                                }


                                sentencia="select * from to_movimientos where id_emp='"+id_empleado+"' and clave='"+clave+"' and fecha_movimiento='"+sqlDate+"'";
                                //System.out.println(sentencia);
                                boolean validaanterior=false;//valida si ya existe el movimiento para no sumar los retardos
                                resultado = st.executeQuery(sentencia);
                                while (resultado.next())
                                {                              
                                  validaanterior=true;   
                                }
                                if(validaanterior==true){//si ya existe se pone en 0 por que no tiene retardo o ya tiene retardo
                                  tiporetardo=0; 
                                  mindif=0;
                                }
                                //System.out.println("TIPO RETARDO"+validaretardomayor+"validador"+validaanterior+" registrodeldia:"+registrodeldia);
                                if(validaretardomayor==2 && validaanterior==false){//retardo mayor y no se ha registrado en el dia
                                    stop();
                                    JPasswordField pwd = new JPasswordField(10); 
                                    String respuesta="Admon2015";
                                    /*
                                    int action = JOptionPane.showConfirmDialog(null, pwd,"Ingrese contraseña",JOptionPane.OK_CANCEL_OPTION);

                                    if(action < 0){
                                        //JOptionPane.showMessageDialog(null,"Cancel, X or escape key selected");
                                    }
                                    else{
                                        respuesta=new String(pwd.getPassword());
                                        //JOptionPane.showMessageDialog(null,"Your password is "+new String(pwd.getPassword()));
                                    }
                                    //String respuesta = JOptionPane.showInputDialog("Escribe la clave de administrador para registrar el empleado");
                                    if(respuesta==null){
                                        respuesta="";
                                    }*/

                                    if(respuesta.equals("Admon2015")){
                                        st.executeUpdate("insert into to_movimientos (id_emp,nombre,fecha_entrada,clave,fecha_movimiento,hora_entrada,tiempo_retarno,retardo,semanal) values('"+id_empleado+"','"+nombre+"',now(),'"+clave+"',now(),'"+hora_ini+"','"+mindif+"','"+tiporetardo+"','"+diasemanal+"')");
                                        //stop();
                                        mensaje_registro mensaje=new mensaje_registro("OK","Entrada registrada correctamente");
                                        mensaje.setVisible(true);
                                    }else if(respuesta.equals("Comision2015")){
                                        st.executeUpdate("insert into to_movimientos (id_emp,nombre,fecha_salida,clave,fecha_movimiento,hora_entrada,tiempo_retarno,retardo,semanal,comision) values('"+id_empleado+"','"+nombre+"',now(),'"+clave+"',now(),'"+hora_ini+"','"+mindif+"','"+tiporetardo+"','"+diasemanal+"','SI')");
                                        //stop();
                                        mensaje_registro mensaje=new mensaje_registro("OK","Salida de comisión registrada correctamente");
                                        mensaje.setVisible(true);
                                    }else{
                                        //stop();
                                        mensaje_registro mensaje=new mensaje_registro("ERROR","La clave no es correcta vuelva a intentarlo colocando el dedo del empleado");
                                        mensaje.setVisible(true);
                                    }

                                }
                                else if(validaretardomayor==2 && validaanterior==true){ //retardo mayor pero con registro en el dia
                                    stop();
                                    JPasswordField pwd = new JPasswordField(10);
                                    String respuesta="Admon2015";
                                    /*
                                    int action = JOptionPane.showConfirmDialog(null, pwd,"Ingrese Contraseña",JOptionPane.OK_CANCEL_OPTION);
                                    if(action < 0){
                                        //JOptionPane.showMessageDialog(null,"Cancel, X or escape key selected");
                                    }
                                    else{
                                        respuesta=new String(pwd.getPassword());
                                        //JOptionPane.showMessageDialog(null,"Your password is "+new String(pwd.getPassword()));
                                    }
                                    //String respuesta = JOptionPane.showInputDialog("Escribe la clave de administrador para registrar el empleado");
                                    System.out.println("RESPUESTA"+respuesta);
                                    if(respuesta==null){
                                        respuesta="";
                                    }*/
                                    if(respuesta.equals("Admon2015")){
                                        st.executeUpdate("insert into to_movimientos (id_emp,nombre,fecha_entrada,clave,fecha_movimiento,hora_entrada,tiempo_retarno,retardo,semanal) values('"+id_empleado+"','"+nombre+"',now(),'"+clave+"',now(),'"+hora_ini+"','"+mindif+"','"+tiporetardo+"','"+diasemanal+"')");
                                        stop();
                                        mensaje_registro mensaje=new mensaje_registro("OK","Entrada registrada correctamente");
                                        mensaje.setVisible(true);
                                    }else if(respuesta.equals("Comision2015")){
                                        st.executeUpdate("insert into to_movimientos (id_emp,nombre,fecha_salida,clave,fecha_movimiento,hora_entrada,tiempo_retarno,retardo,semanal,comision) values('"+id_empleado+"','"+nombre+"',now(),'"+clave+"',now(),'"+hora_ini+"','"+mindif+"','"+tiporetardo+"','"+diasemanal+"','SI')");
                                        stop();
                                        mensaje_registro mensaje=new mensaje_registro("OK","Salida de comisión registrada correctamente");
                                        mensaje.setVisible(true);
                                    }else{
                                        stop();
                                        mensaje_registro mensaje=new mensaje_registro("ERROR","La clave no es correcta vuelva a intentarlo colocando el dedo del empleado");
                                        mensaje.setVisible(true);
                                    }
                                }
                                else if(validaretardomayor<2 && validaanterior==false){ //tiene hasta retardo menor y es su primer entrada
                                    //System.out.println("VALIDARETARDO <2 AND VALIDADOR =false");
                                    st.executeUpdate("insert into to_movimientos (id_emp,nombre,fecha_entrada,clave,fecha_movimiento,hora_entrada,tiempo_retarno,retardo,semanal) values('"+id_empleado+"','"+nombre+"',now(),'"+clave+"',now(),'"+hora_ini+"','"+mindif+"','"+tiporetardo+"','"+diasemanal+"')");
                                    stop();
                                    mensaje_registro mensaje=new mensaje_registro("OK","Entrada registrada correctamente");
                                    mensaje.setVisible(true);
                                }
                                else if(validaretardomayor<2 && validaanterior==true){ //tiene hasta retardo menor y ya esta registrado por lo menos una entrada
                                    //System.out.println("VALIDARETARDO <2 AND VALIDADOR =TRUE");
                                    st.executeUpdate("insert into to_movimientos (id_emp,nombre,fecha_entrada,clave,fecha_movimiento,hora_entrada,tiempo_retarno,retardo,semanal) values('"+id_empleado+"','"+nombre+"',now(),'"+clave+"',now(),'"+hora_ini+"','"+mindif+"','"+tiporetardo+"','"+diasemanal+"')");
                                    stop();
                                    mensaje_registro mensaje=new mensaje_registro("OK","Entrada registrada correctamente");
                                    mensaje.setVisible(true);
                                }


                                //JOptionPane.showMessageDialog(null,"Entrada registrada correctamente");
                                //start();
                            }
                    }
                    if(valida==false){
                        mensaje_registro mensaje=new mensaje_registro("ERROR","No existe el empleado con la clave:"+clave);
                        mensaje.setVisible(true);
                        //JOptionPane.showMessageDialog(null,"No existe el empleado con la clave: "+clave);
                    }
                }else{
                    mensaje_registro mensaje=new mensaje_registro("ERROR","No se pudo registrar la entrada ya que no cuenta con un HORARIO ESTABLECIDO favor de contactar al administrador del sistema.");
                    mensaje.setVisible(true);
                    //JOptionPane.showMessageDialog(null,"ERROR: No se pudo registrar la entrada ya que no cuenta con un HORARIO ESTABLECIDO favor de contactar al administrador del sistema.");
                }
        }
        resultado.close();
        con.desconectar();
        } catch (SQLException ex) {
            Logger.getLogger(checador.class.getName()).log(Level.SEVERE, null, ex);
        }
        
     try {
         llenarTablaMov();
         llenarTablaSalida();
     } catch (Exception ex) {
         Logger.getLogger(checador.class.getName()).log(Level.SEVERE, null, ex);
     }
  
  
  
  
  }
        
        
    public int getDayOfTheWeek(Date d){
	GregorianCalendar cal = new GregorianCalendar();
	cal.setTime(d);
	return cal.get(Calendar.DAY_OF_WEEK);		
    }
        
        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    public static javax.swing.JMenu jMenu1;
    public static javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    public static javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jlestatus;
    private javax.swing.JPanel jpdos;
    private javax.swing.JPanel jptres;
    private javax.swing.JPanel jpuno;
    private static javax.swing.JTable jtmovimientos;
    private static javax.swing.JTable jtsalidas;
    private javax.swing.JLabel lbfoto;
    private javax.swing.JLabel lblHoras;
    private javax.swing.JLabel lblImagenHuella;
    public static javax.swing.JMenu lblusuario;
    private static javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtclave;
    private javax.swing.JTextField txtnombre;
    // End of variables declaration//GEN-END:variables
}
